<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/data/repository http://www.springframework.org/schema/data/repository/spring-repository-1.6.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
       default-lazy-init="true">
        
    <!-- Doing so automatically registers all Spring standard post-processors for annotation-based configuration -->
	<context:annotation-config/>
	<!-- 父容器中扫描核心层注解(@Service,@Repository) -->
	<context:component-scan base-package="com.shiant.study"/>
    
	<tx:annotation-driven transaction-manager="transactionManager"/>
    
	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
            <list>  
                <value>classpath:META-INF/dataSource.properties</value>
                <value>classpath:META-INF/memcached.properties</value>  
                <value>classpath:META-INF/RMI.properties</value> 
            </list>  
        </property>  
    </bean>
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">  
        <property name="url" value="${url}" />  
        <property name="username" value="${username}" />  
        <property name="password" value="${password}" />  
  
        <property name="maxActive" value="${druid.maxActive}" />  
        <property name="initialSize" value="${druid.initialSize}" />  
        <property name="maxWait" value="${druid.maxWait}" />  
        <property name="minIdle" value="${druid.minIdle}" />  
  
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />  
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />  
  
        <property name="validationQuery" value="SELECT 'x' FROM DUAL" />  
        <property name="testWhileIdle" value="true" />  
        <property name="testOnBorrow" value="false" />  
        <property name="testOnReturn" value="false" />  
        <!-- mysql 不支持 poolPreparedStatements-->  
        <!--<property name="poolPreparedStatements" value="true" />-->  
        <!--<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />-->  
  
        <!-- 开启Druid的监控统计功能 -->  
        <property name="filters" value="stat" />  
  
    </bean>
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />  
	</bean>
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	
	<jpa:repositories base-package="com.shiant.study.core" transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory"/>
    
	<!-- Memcached Integration -->
	
	<!-- <bean  
        id="memcachedClientBuilder"  
        class="net.rubyeye.xmemcached.XMemcachedClientBuilder">  
        XMemcachedClientBuilder have two arguments.First is server list,and   
            second is weights array. 
        	一致性hash散列, 在clustering环境下 1:1权重
        <constructor-arg>
        	<value>${memcached.node}</value>
        </constructor-arg>  
        <property name="commandFactory">  
            <bean class="net.rubyeye.xmemcached.command.TextCommandFactory" />  
        </property>  
        <property name="sessionLocator">  
            <bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator" />  
        </property>  
        <property name="transcoder">  
            <bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder" />  
        </property>
        connection pool size
        <property name="connectionPoolSize" value="50"/>
        
    </bean>  
    Use factory bean to build memcached client  
    <bean  
        id="memcachedClient"  
        factory-bean="memcachedClientBuilder"  
        factory-method="build"  
        destroy-method="shutdown" /> -->
</beans>